apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

//apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'

apply plugin: 'com.google.firebase.crashlytics'

apply plugin: "jacoco"

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

static def versionNameDate() {
    return new Date().format("yyyyMMdd")
}

android {
    signingConfigs {
        config {
            storeFile file('D:\\ANDROID\\AndroidProject\\MapQuestYandex_teplo_Inspect\\keystore6.jks')
            storePassword 'QPmIN3'
            keyAlias 'teplo'
            keyPassword 'QPmIN3'
        }
    }

    splits {
        // Конфигурируем несколько APK на основе ABI (архитектура процессора)
        abi {
            enable true
            /*По умолчанию все ABI включены, поэтому используйте reset() и include, чтобы указать, только нужные архитектуры*/
            // Сбрасывает список ABI, для которых Gradle должен создавать APKS, на none
            reset()
            // Указывает список ABI, для которых Gradle должен создавать APK-файлы.
            include 'armeabi-v7a','x86'

            // Указывает, что мы хотим(true)/не хотим(false) создать универсальный APK, который включает в себя все ABI.
            universalApk false
        }
    }


    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "ru.bingosoft.teploInspector"
        minSdkVersion 18
        targetSdkVersion 29
        versionCode 1
        versionName versionNameDate()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // Состояние приложения очищается между тестами
        testInstrumentationRunnerArguments clearPackageData: 'true'

        vectorDrawables.useSupportLibrary = true // Для использования VectorDrawable в Fab кнопке

        multiDexEnabled true

        // Библиотеки Mapkit будут копироваться только для armeabi-v7a архитектуры проуецессора. Снижает размер APK
        /*ndk {
            abiFilters 'armeabi-v7a'
        }*/
    }
    buildTypes {
        presentation {
            resValue 'string', 'login', accent_login
            resValue 'string', 'password', accent_password
            // Наша тестовая система для показов
            resValue 'string', 'url', '"https://teplomi.bingosoft-office.ru/"' // Тестовый сервер
            resValue 'string', 'url_socket', '"ws://teplomi.bingosoft-office.ru/notificationservice/socket"'


            buildConfigField "String", "urlServer", '"https://teplomi.bingosoft-office.ru/"'
            buildConfigField "String", "url_socket", '"ws://teplomi.bingosoft-office.ru/notificationservice/socket"'
            buildConfigField "String", "yandex_mapkit_api", yandex_mapkit_api

            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config

            // Скрипт для генерации разного имени в зависимости от abi
            // Подробнее тут https://stackoverflow.com/questions/64713716/error-could-not-find-eocd-after-adding-splits-in-android
            // https://stackoverflow.com/questions/52075574/no-such-property-abi-for-class-org-gradle-api-tasks-outputfile
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    project.ext { appName = 'TeploMI' }
                    def abi=output.getFilter(com.android.build.OutputFile.ABI)
                    if (abi!=null) {
                        outputFileName = "${appName}-${abi}-${variant.name}-${variant.versionName}.apk"
                    } else {
                        outputFileName = "${appName}-${variant.name}-${variant.versionName}.apk"
                    }


                }
            }
        }
        debug {resValue 'string', 'login', accent_login
            testCoverageEnabled = true
            //isTestCoverageEnabled true
            resValue 'string', 'password', accent_password
            // Наша тестовая система для показов
            /*resValue 'string', 'url', '"http://teplomi.bingosoft-office.ru/"' // Тестовый сервер
            resValue 'string', 'url_socket', '"ws://teplomi.bingosoft-office.ru/notificationservice/socket"'*/
            resValue 'string', 'url', '"https://mi.teploenergo-nn.ru/"' // Рабочий сервер сервер
            resValue 'string', 'url_socket', '"ws://mi.teploenergo-nn.ru/notificationservice/socket"'


            /*buildConfigField "String", "urlServer", '"http://teplomi.bingosoft-office.ru/"'
            buildConfigField "String", "url_socket", '"ws://teplomi.bingosoft-office.ru/notificationservice/socket"'*/
            buildConfigField "String", "yandex_mapkit_api", yandex_mapkit_api
            buildConfigField "String", "urlServer", '"https://mi.teploenergo-nn.ru/"'
            buildConfigField "String", "url_socket", '"ws://mi.teploenergo-nn.ru/notificationservice/socket"'

        }
        release {
            resValue 'string', 'login', ""
            resValue 'string', 'password', ""
            resValue 'string', 'url', '"https://mi.teploenergo-nn.ru/"'
            resValue 'string', 'url_socket', '"ws://mi.teploenergo-nn.ru/notificationservice/socket"'

            buildConfigField "String", "urlServer", '"https://mi.teploenergo-nn.ru/"'
            buildConfigField "String", "yandex_mapkit_api", yandex_mapkit_api
            buildConfigField "String", "url_socket", '"ws://mi.teploenergo-nn.ru/notificationservice/socket"'


            shrinkResources false // работает только в сочетании с minifyEnabled true
            minifyEnabled false // minifyEnabled true сильно увеличивает время сборки, но уменьшает размер за счет обфускации
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }



    testOptions {
        //execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests.returnDefaultValues = true // Необходимо для тестирования например Location
        unitTests.includeAndroidResources = true // Необходимо для работы Robolectric, иначе Jacoco не учитывает тесты Robolectric
        unitTests.all {
            setIgnoreFailures(true) // Игнорирует Failed тесты при формировании отчета Jacoco
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) { //createDebugAndroidTestCoverageReport

    reports {
        xml.enabled = false
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/db/**/*.*',  // Исключаем папку db т.к. в ней тестировать нечего кроме сгенерированных get/set методов
                      '**/models/*.*',  // Исключаем папку models т.к. в ней тоже одни data классы со сгенерированными методами
                      '**/Const*.*'// Исключаем т.к. там только singleton object без логики (без методов)
    ]
    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"


    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([kotlinTree]))
    def reportsTree=fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ])
    executionData.setFrom(files([reportsTree]))

}

repositories {
    maven {
        url "http://maven.google.com/"
    }
}


//Определяет стратегии, связанные с разрешением зависимостей. Например, принудительное использование определенных версий зависимостей,
//Без этой настройки нет некоторых assert методов в тестах, например asserThrows см. OrderPresenterTest
configurations.all {
    resolutionStrategy.force "junit:junit:4.13.2"
    resolutionStrategy.force "androidx.test:monitor:1.4.0"
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version" //1.3.72
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'androidx.test:core:1.4.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
    androidTestImplementation "androidx.navigation:navigation-testing:2.3.5"
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    //MaterialDesign компоненты
    implementation 'com.google.android.material:material:1.2.0-alpha05' //при смене версии могут ломаться кнопки


    def roomVersion = "2.3.0"
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.0.3'


    // Dagger2
    implementation 'com.google.dagger:dagger:2.28.3'
    implementation 'com.google.dagger:dagger-android-support:2.24'
    kapt 'com.google.dagger:dagger-android-processor:2.24'
    kapt 'com.google.dagger:dagger-compiler:2.24'
    kaptTest 'com.google.dagger:dagger-compiler:2.24'

    // Retrofit 2 для работы с Web запросами
    implementation 'com.squareup.retrofit2:retrofit:2.7.0'
    //Retrofit 2 + RxJava
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    //Retrofit 2 Logging
    implementation 'com.squareup.okhttp3:logging-interceptor:4.3.1'
    // GSON для Retrofit 2 конвертирует данные в Json
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'

    // RecyclerView и CardView
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    // Новый логгер
    implementation 'com.jakewharton.timber:timber:4.7.1'

    //Crashlytics
    implementation 'com.google.firebase:firebase-analytics:19.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.1'

    // Firebase Cloud Messaging
    implementation 'com.google.firebase:firebase-messaging:22.0.0'

    //Spinner(combobox) Material Design
    implementation 'com.weiwangcn.betterspinner:library-material:1.1.0'

    // Glide Для работы с картинками
    implementation 'com.github.bumptech.glide:glide:4.7.1'


    // Основная библиотека MapKit.
    implementation 'com.yandex.android:mapkit:3.5.0'
    // Дополнительные модули MapKit.
    // Удалите зависимости если ваше приложение не использует их.
    implementation 'com.yandex.android:directions:3.5.0'
    //implementation 'com.yandex.android:places:3.5.0'
    //implementation 'com.yandex.android:search:3.5.0'
    implementation 'com.yandex.android:transport:3.5.0'

    //Получение локации пользователя
    implementation 'com.google.android.gms:play-services-location:18.0.0'

    // Для переноса секций маршрута
    implementation 'com.google.android:flexbox:2.0.1'

    // Для Exif данных в jpeg файлах
    implementation 'androidx.exifinterface:exifinterface:1.3.2'

    // Для tooltip подсказок
    implementation 'com.nhaarman.supertooltips:library:3.0.0'

    // Mockito
    testImplementation 'org.mockito:mockito-core:3.8.0'
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.1.0"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0" // Для работы ArgumentCaptor
    androidTestImplementation 'org.mockito:mockito-android:3.7.7'

    // WorkManager
    //implementation "android.arch.work:work-runtime:1.0.1"
    implementation "androidx.work:work-runtime-ktx:2.5.0"

    /*androidTestImplementation 'com.21buttons:fragment-test-rule:2.0.1'
    debugImplementation 'com.21buttons:fragment-test-rule-extras:2.0.1'*/

    debugImplementation 'androidx.fragment:fragment-testing:1.3.6'


}